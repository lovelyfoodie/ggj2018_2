#if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_WIIU || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class AkMIDIEvent : IDisposable {
  private global::System.IntPtr swigCPtr;
  protected bool swigCMemOwn;

  internal AkMIDIEvent(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  internal static global::System.IntPtr getCPtr(AkMIDIEvent obj) {
    return (obj == null) ? global::System.IntPtr.Zero : obj.swigCPtr;
  }

  internal virtual void setCPtr(global::System.IntPtr cPtr) {
    Dispose();
    swigCPtr = cPtr;
  }

  ~AkMIDIEvent() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AkSoundEnginePINVOKE.CSharp_delete_AkMIDIEvent(swigCPtr);
        }
        swigCPtr = global::System.IntPtr.Zero;
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public byte byChan { set { AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byChan_set(swigCPtr, value); }  get { return AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byChan_get(swigCPtr); } 
  }

  public AkMIDIEventTypes byType { set { AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byType_set(swigCPtr, (int)value); }  get { return (AkMIDIEventTypes)AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byType_get(swigCPtr); } 
  }

  public byte byOnOffNote { set { AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byOnOffNote_set(swigCPtr, value); }  get { return AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byOnOffNote_get(swigCPtr); } 
  }

  public byte byVelocity { set { AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byVelocity_set(swigCPtr, value); }  get { return AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byVelocity_get(swigCPtr); } 
  }

  public AkMIDICcTypes byCc { set { AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byCc_set(swigCPtr, (int)value); }  get { return (AkMIDICcTypes)AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byCc_get(swigCPtr); } 
  }

  public byte byCcValue { set { AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byCcValue_set(swigCPtr, value); }  get { return AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byCcValue_get(swigCPtr); } 
  }

  public byte byValueLsb { set { AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byValueLsb_set(swigCPtr, value); }  get { return AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byValueLsb_get(swigCPtr); } 
  }

  public byte byValueMsb { set { AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byValueMsb_set(swigCPtr, value); }  get { return AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byValueMsb_get(swigCPtr); } 
  }

  public byte byAftertouchNote { set { AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byAftertouchNote_set(swigCPtr, value); }  get { return AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byAftertouchNote_get(swigCPtr); } 
  }

  public byte byNoteAftertouchValue { set { AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byNoteAftertouchValue_set(swigCPtr, value); }  get { return AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byNoteAftertouchValue_get(swigCPtr); } 
  }

  public byte byChanAftertouchValue { set { AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byChanAftertouchValue_set(swigCPtr, value); }  get { return AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byChanAftertouchValue_get(swigCPtr); } 
  }

  public byte byProgramNum { set { AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byProgramNum_set(swigCPtr, value); }  get { return AkSoundEnginePINVOKE.CSharp_AkMIDIEvent_byProgramNum_get(swigCPtr); } 
  }

  public AkMIDIEvent() : this(AkSoundEnginePINVOKE.CSharp_new_AkMIDIEvent(), true) {
  }

}
#endif // #if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_WIIU || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.